{"version":3,"file":"gridy.js","sources":["es6/Shape.js","es6/Constants.js","es6/Integer2.js","es6/Float2.js","es6/Rectangle.js","es6/bounds.js","es6/Axes.js","es6/Integer3.js","es6/HexagonalTile.js","es6/TileType.js","es6/HexagonalGrid.js","es6/BrickGrid.js","es6/TriangularTile.js","es6/TriangularGrid.js","es6/Float3.js","es6/RadialTile.js","es6/RadialGrid.js","es6/RectangularTile.js","es6/RectangularGrid.js","es6/Radial8Tile.js","es6/Rectangular8Tile.js","es6/Utils.js","es6/Search.js","es6/Transform.js","es6/Path.js"],"sourcesContent":["export var Shape;\n(function (Shape) {\n    Shape[Shape[\"Even\"] = 0] = \"Even\";\n    Shape[Shape[\"Odd\"] = 1] = \"Odd\";\n    Shape[Shape[\"Hexagonal\"] = 2] = \"Hexagonal\";\n    Shape[Shape[\"Triangular\"] = 3] = \"Triangular\";\n    Shape[Shape[\"Rhombus\"] = 4] = \"Rhombus\";\n})(Shape || (Shape = {}));\n//# sourceMappingURL=Shape.js.map","export const SQRT_3 = Math.sqrt(3);\nexport const SQRT_3_2 = Math.sqrt(3) / 2;\nexport const SQRT_3_3 = Math.sqrt(3) / 3;\nexport const SQRT_3_6 = Math.sqrt(3) / 6;\nexport const SQRT_2 = Math.sqrt(2);\nexport const SQRT_2_2 = Math.sqrt(2) / 2;\nexport const SQRT_2_4 = Math.sqrt(2) / 4;\nexport const DEG_TO_RAD = Math.PI / 180;\nexport const ANG = 360;\nexport const ANG_2 = 180;\nexport const ANG_4 = 90;\n//# sourceMappingURL=Constants.js.map","export class Integer2 {\n    constructor(x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n    }\n    get value() {\n        return [this.x, this.y];\n    }\n    distance(b) {\n        return Math.floor((Math.abs(this.x - b.x) + Math.abs(this.y - b.y)) / 2);\n    }\n    toString() {\n        return this.value.toString();\n    }\n    equals(p) {\n        return (this.x === p.x) && (this.y === p.y);\n    }\n    add(p) {\n        return new Integer2(this.x + p.x, this.y + p.y);\n    }\n    scale(d) {\n        return new Integer2(this.x * d, this.y * d);\n    }\n    cubeLength() {\n        return Math.floor((Math.abs(this.x) + Math.abs(this.y)) / 2);\n    }\n}\n//# sourceMappingURL=Integer2.js.map","import { Integer2 } from './Integer2';\nexport class Float2 {\n    constructor(x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n    }\n    static ROUND(h) {\n        const rx = Math.round(h.x);\n        const ry = Math.round(h.y);\n        return new Integer2(rx, ry);\n    }\n    static LERP(a, b, t) {\n        return new Float2(a.x + (b.x - a.x) * t, a.y + (b.y - a.y) * t);\n    }\n    static LINE(a, b) {\n        const N = a.distance(b);\n        const results = [];\n        for (let i = 0; i < (N + 1); i++) {\n            results.push(Float2.ROUND(Float2.LERP(a, b, 1 / Math.max(1, N) * i)));\n        }\n        return results;\n    }\n    equals(p) {\n        return (this.x === p.x) && (this.y === p.y);\n    }\n    get value() {\n        return [this.x, this.y];\n    }\n    scale(k) {\n        return new Float2(this.x * k, this.y * k);\n    }\n    toString() {\n        return this.value.toString();\n    }\n}\n//# sourceMappingURL=Float2.js.map","import { Float2 } from './Float2';\nexport class Rectangle {\n    constructor(minX = 0, maxX = 0, minY = 0, maxY = 0) {\n        this.minX = 0;\n        this.maxX = 0;\n        this.minY = 0;\n        this.maxY = 0;\n        this.minX = minX;\n        this.maxX = maxX;\n        this.minY = minY;\n        this.maxY = maxY;\n    }\n    static ADD(a, b) {\n        return new Rectangle(a.minX + b.minX, a.maxX + b.maxX, a.minY + b.minY, a.maxY + b.maxY);\n    }\n    static POINTS(a) {\n        return [\n            new Float2(a.minX, a.minY),\n            new Float2(a.maxX, a.minY),\n            new Float2(a.minX, a.maxY),\n            new Float2(a.maxX, a.maxY)\n        ];\n    }\n}\n//# sourceMappingURL=Rectangle.js.map","import { Rectangle } from './Rectangle';\n// From http://www.redblobgames.com/grids/hexagons/\n// Copyright 2012 Red Blob Games <redblobgames@gmail.com>\n// License: Apache v2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>\n// Original source: http://www.redblobgames.com/grids/hexagons/Grid.hx\nfunction boundsOfPoints(points) {\n    const rectangle = new Rectangle(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);\n    for (const p of points) {\n        if (p.x < rectangle.minX) {\n            rectangle.minX = p.x;\n        }\n        if (p.x > rectangle.maxX) {\n            rectangle.maxX = p.x;\n        }\n        if (p.y < rectangle.minY) {\n            rectangle.minY = p.y;\n        }\n        if (p.y > rectangle.maxY) {\n            rectangle.maxY = p.y;\n        }\n    }\n    return rectangle;\n}\nexport function bounds(grid) {\n    if (grid.tileTypes === 2) {\n        let sum = [];\n        const centers = grid.tiles.reduce((r, tile) => {\n            r[grid.getTileType(tile)].push(grid.center(tile));\n            return r;\n        }, [[], []]);\n        for (let i = 0; i < 2; i++) {\n            const b1 = boundsOfPoints(grid.vertices(grid.orientation, undefined, i));\n            const b2 = boundsOfPoints(centers[i]);\n            sum = sum.concat(Rectangle.POINTS(Rectangle.ADD(b1, b2)));\n        }\n        return boundsOfPoints(sum);\n    }\n    else {\n        const centers = grid.tiles.map((tile) => {\n            return grid.center(tile);\n        });\n        const b1 = boundsOfPoints(grid.vertices(grid.orientation));\n        const b2 = boundsOfPoints(centers);\n        return Rectangle.ADD(b1, b2);\n    }\n}\n//# sourceMappingURL=bounds.js.map","export var Axes4;\n(function (Axes4) {\n    Axes4[Axes4[\"N\"] = -1] = \"N\";\n    Axes4[Axes4[\"S\"] = 1] = \"S\";\n    Axes4[Axes4[\"W\"] = -2] = \"W\";\n    Axes4[Axes4[\"E\"] = 2] = \"E\";\n})(Axes4 || (Axes4 = {}));\nexport var Axes8;\n(function (Axes8) {\n    Axes8[Axes8[\"N\"] = 1] = \"N\";\n    Axes8[Axes8[\"E\"] = 2] = \"E\";\n    Axes8[Axes8[\"NW\"] = 3] = \"NW\";\n    Axes8[Axes8[\"SW\"] = 4] = \"SW\";\n    Axes8[Axes8[\"S\"] = -1] = \"S\";\n    Axes8[Axes8[\"W\"] = -2] = \"W\";\n    Axes8[Axes8[\"SE\"] = -3] = \"SE\";\n    Axes8[Axes8[\"NE\"] = -4] = \"NE\";\n})(Axes8 || (Axes8 = {}));\nexport var Axes6;\n(function (Axes6) {\n    Axes6[Axes6[\"N\"] = -1] = \"N\";\n    Axes6[Axes6[\"S\"] = 1] = \"S\";\n    Axes6[Axes6[\"NW\"] = -2] = \"NW\";\n    Axes6[Axes6[\"SE\"] = 2] = \"SE\";\n    Axes6[Axes6[\"NE\"] = -3] = \"NE\";\n    Axes6[Axes6[\"SW\"] = 3] = \"SW\";\n})(Axes6 || (Axes6 = {}));\n//# sourceMappingURL=Axes.js.map","export class Integer3 {\n    constructor(x = 0, y = 0, z = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    distance(b) {\n        return Math.floor((Math.abs(this.x - b.x) + Math.abs(this.y - b.y) + Math.abs(this.z - b.z)) / 2);\n    }\n    add(b) {\n        return new Integer3(this.x + b.x, this.y + b.y, this.z + b.z);\n    }\n    scale(k) {\n        return new Integer3(this.x * k, this.y * k, this.z * k);\n    }\n    toString() {\n        return this.value.toString();\n    }\n    get value() {\n        return [this.x, this.y, this.z];\n    }\n    equals(other) {\n        return (this.x === other.x) && (this.y === other.y) && (this.z === other.z);\n    }\n    round() {\n        return new Integer3(Math.round(this.x), Math.round(this.y), Math.round(this.z));\n    }\n    cubeLength() {\n        return Math.floor((Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)) / 2);\n    }\n}\n//# sourceMappingURL=Integer3.js.map","import { Axes6 } from './Axes';\nimport { Integer3 } from './Integer3';\n// From http://www.redblobgames.com/grids/hexagons/\n// Copyright 2013 Red Blob Games <redblobgames@gmail.com>\n// License: Apache v2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>\n// Original source: http://www.redblobgames.com/grids/hexagons/Cube.hx\n/**\n * ![](../../examples/output/hexagonal-tile.svg)\n */\nexport class HexagonalTile extends Integer3 {\n    constructor() {\n        super(...arguments);\n        this.tiles = [];\n    }\n    get key() {\n        return this.toString();\n    }\n    shift() {\n        return HexagonalTile.directions[4][1];\n    }\n    directions() {\n        return HexagonalTile.directions;\n    }\n    add(a) {\n        const r = super.add(a);\n        return new HexagonalTile(r.x, r.y, r.z);\n    }\n    scale(a) {\n        const r = super.scale(a);\n        return new HexagonalTile(r.x, r.y, r.z);\n    }\n    neighbors() {\n        const results = [];\n        for (const a of HexagonalTile.directions) {\n            results.push([a[0], this.add(a[1])]);\n        }\n        return results;\n    }\n    right() {\n        const x = this.x;\n        this.x = -this.z;\n        this.z = -this.y;\n        this.y = -x;\n        return this;\n    }\n    left() {\n        const z = this.z;\n        this.z = -this.x;\n        this.x = -this.y;\n        this.y = -z;\n        return this;\n    }\n}\nHexagonalTile.directions = [\n    [Axes6.NW, new HexagonalTile(1, -1, 0)],\n    [Axes6.NE, new HexagonalTile(1, 0, -1)],\n    [Axes6.N, new HexagonalTile(0, 1, -1)],\n    [Axes6.SE, new HexagonalTile(-1, 1, 0)],\n    [Axes6.SW, new HexagonalTile(-1, 0, 1)],\n    [Axes6.S, new HexagonalTile(0, -1, 1)]\n];\n//# sourceMappingURL=HexagonalTile.js.map","export var TileType;\n(function (TileType) {\n    TileType[TileType[\"Simple\"] = 1] = \"Simple\";\n    TileType[TileType[\"Variable\"] = 2] = \"Variable\";\n})(TileType || (TileType = {}));\n//# sourceMappingURL=TileType.js.map","import { bounds } from './bounds';\nimport { SQRT_3, SQRT_3_2, SQRT_3_3 } from './Constants';\nimport { Float2 } from './Float2';\nimport { HexagonalTile } from './HexagonalTile';\nimport { Position } from './Position';\nimport { Shape } from './Shape';\nimport { TileType } from './TileType';\n// From http://www.redblobgames.com/grids/hexagons/\n// Copyright 2012 Red Blob Games <redblobgames@gmail.com>\n// License: Apache v2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>\n// Original source: http://www.redblobgames.com/grids/hexagons/Grid.hx\n/**\n * ![](../../examples/output/hexagonal-grid.svg)\n */\nexport class HexagonalGrid {\n    constructor(scale, orientation = false, shape = Shape.Hexagonal, x = 1, y) {\n        this.scaleY = -1;\n        this.angle = -30;\n        this.tileTypes = TileType.Simple;\n        this.scale = scale;\n        this.radius = SQRT_3_2 * scale / SQRT_3_2 / 2;\n        this.orientation = orientation;\n        const yy = y || x;\n        this.x = x;\n        this.y = yy;\n        this.shape = shape;\n        if (shape === Shape.Even && orientation === false) {\n            this.toTile = HexagonalGrid.EVEN_Q_TO_CUBE;\n            this.toPoint = HexagonalGrid.CUBE_TO_EVEN_Q;\n            this.tiles = HexagonalGrid.TRAPEZOIDAL_SHAPE(0, x, 0, yy, this.toTile);\n        }\n        else if (shape === Shape.Even && orientation === true) {\n            this.toTile = HexagonalGrid.EVEN_R_TO_CUBE;\n            this.toPoint = HexagonalGrid.CUBE_TO_EVEN_R;\n            this.tiles = HexagonalGrid.TRAPEZOIDAL_SHAPE(0, x, 0, yy, this.toTile);\n        }\n        else if (shape === Shape.Odd && orientation === false) {\n            this.toTile = HexagonalGrid.ODD_Q_TO_CUBE;\n            this.toPoint = HexagonalGrid.CUBE_TO_ODD_Q;\n            this.tiles = HexagonalGrid.TRAPEZOIDAL_SHAPE(0, x, 0, yy, this.toTile);\n        }\n        else if (shape === Shape.Odd && orientation === true) {\n            this.toTile = HexagonalGrid.ODD_R_TO_CUBE;\n            this.toPoint = HexagonalGrid.CUBE_TO_ODD_R;\n            this.tiles = HexagonalGrid.TRAPEZOIDAL_SHAPE(0, x, 0, yy, this.toTile);\n        }\n        else if (shape === Shape.Hexagonal) {\n            // this.toTile = HexagonalGrid.EVEN_Q_TO_CUBE;\n            // this.toPoint = HexagonalGrid.CUBE_TO_EVEN_Q;\n            this.toTile = HexagonalGrid.TWO_AXIS_TO_CUBE;\n            this.toPoint = HexagonalGrid.CUBE_TO_TWO_AXIS;\n            this.tiles = HexagonalGrid.HEXAGONAL_SHAPE(x);\n        }\n        else if (shape === Shape.Triangular) {\n            this.toTile = HexagonalGrid.EVEN_Q_TO_CUBE;\n            this.toPoint = HexagonalGrid.CUBE_TO_EVEN_Q;\n            this.tiles = HexagonalGrid.TRIANGULAR_SHAPE(x);\n        }\n        else { // if (shape === Shape.Rhombus)\n            this.toTile = HexagonalGrid.TWO_AXIS_TO_CUBE;\n            this.toPoint = HexagonalGrid.CUBE_TO_TWO_AXIS;\n            this.tiles = HexagonalGrid.TRAPEZOIDAL_SHAPE(0, x, 0, yy, this.toTile);\n        }\n    }\n    static TWO_AXIS_TO_CUBE(position) {\n        return new HexagonalTile(position.x, -position.y - position.x, position.y);\n    }\n    static CUBE_TO_TWO_AXIS(tile) {\n        return new Position(tile.x, tile.z);\n    }\n    static TWO_AXIS_TO_CUBE_XY(position) {\n        return new HexagonalTile(position.x, position.y, -position.x - position.y);\n    }\n    static CUBE_TO_TWO_AXIS_XY(tile) {\n        return new Position(tile.x, tile.y);\n    }\n    static TWO_AXIS_TO_CUBE_YZ(position) {\n        return new HexagonalTile(-position.x - position.y, position.x, position.y);\n    }\n    static CUBE_TO_TWO_AXIS_YZ(tile) {\n        return new Position(tile.y, tile.z);\n    }\n    static ODD_Q_TO_CUBE(position) {\n        /* tslint:disable:no-bitwise */\n        const x = position.x;\n        const z = position.y - ((position.x - (position.x & 1)) >> 1);\n        /* tslint:enable:no-bitwise */\n        return new HexagonalTile(x, -x - z, z);\n    }\n    static CUBE_TO_ODD_Q(tile) {\n        const x = tile.x;\n        const z = tile.z;\n        /* tslint:disable:no-bitwise */\n        return new Position(x, z + ((x - (x & 1)) >> 1));\n        /* tslint:enable:no-bitwise */\n    }\n    static EVEN_Q_TO_CUBE(position) {\n        /* tslint:disable:no-bitwise */\n        const x = position.x;\n        const z = position.y - ((position.x + (position.x & 1)) >> 1);\n        /* tslint:enable:no-bitwise */\n        return new HexagonalTile(x, -x - z, z);\n    }\n    static CUBE_TO_EVEN_Q(tile) {\n        const x = tile.x;\n        const z = tile.z;\n        /* tslint:disable:no-bitwise */\n        return new Position(x, z + ((x + (x & 1)) >> 1));\n        /* tslint:enable:no-bitwise */\n    }\n    static ODD_R_TO_CUBE(position) {\n        /* tslint:disable:no-bitwise */\n        const z = position.y;\n        const x = position.x - ((position.y - (position.y & 1)) >> 1);\n        /* tslint:enable:no-bitwise */\n        return new HexagonalTile(x, -x - z, z);\n    }\n    static CUBE_TO_ODD_R(tile) {\n        const x = tile.x;\n        const z = tile.z;\n        /* tslint:disable:no-bitwise */\n        return new Position(x + ((z - (z & 1)) >> 1), z);\n        /* tslint:enable:no-bitwise */\n    }\n    static EVEN_R_TO_CUBE(position) {\n        /* tslint:disable:no-bitwise */\n        const z = position.y;\n        const x = position.x - ((position.y + (position.y & 1)) >> 1);\n        /* tslint:enable:no-bitwise */\n        return new HexagonalTile(x, -x - z, z);\n    }\n    static CUBE_TO_EVEN_R(tile) {\n        const x = tile.x;\n        const z = tile.z;\n        /* tslint:disable:no-bitwise */\n        return new Position(x + ((z + (z & 1)) >> 1), z);\n        /* tslint:enable:no-bitwise */\n    }\n    static TRAPEZOIDAL_SHAPE(minQ, maxQ, minR, maxR, toCube) {\n        const hexes = [];\n        for (let q = minQ; q < maxQ; q++) {\n            for (let r = minR; r < maxR; r++) {\n                hexes.push(toCube(new Position(q, r)));\n            }\n        }\n        return hexes;\n    }\n    static TRIANGULAR_SHAPE(size) {\n        const hexes = [];\n        for (let k = 0; k < size; k++) {\n            for (let i = 0; i < (k + 1); i++) {\n                hexes.push(new HexagonalTile(i, -k, k - i));\n            }\n        }\n        return hexes;\n    }\n    static HEXAGONAL_SHAPE(size) {\n        const hexes = [];\n        for (let x = -size; x < size; x++) {\n            for (let y = -size; y < size; y++) {\n                const z = -x - y;\n                if (Math.abs(x) < size && Math.abs(y) < size && Math.abs(z) < size) {\n                    hexes.push(new HexagonalTile(x, y, z));\n                }\n            }\n        }\n        return hexes;\n    }\n    static REGION(xmin, xmax, ymin, ymax, zmin, zmax) {\n        const results = [];\n        for (let x = xmin; x <= xmax; x++) {\n            for (let y = Math.max(ymin, -x - zmax); y <= Math.min(ymax, -x - zmin); y++) {\n                const z = -x - y;\n                results.push(new HexagonalTile(x, y, z));\n            }\n        }\n        return results;\n    }\n    bounds() {\n        return bounds(this);\n    }\n    vertices(orientation, scale) {\n        const points = [];\n        let s = (scale === undefined) ? this.scale : scale;\n        s /= SQRT_3_2;\n        const o = (orientation === undefined) ? false : this.orientation;\n        for (let i = 0; i < 6; i++) {\n            const angle = Math.PI * (i * 2 - (o ? 1 : 0)) * 2 / 12;\n            points.push(new Float2(s * Math.cos(angle) * 0.5, s * Math.sin(angle) * 0.5));\n        }\n        return points;\n    }\n    center(tile) {\n        let s;\n        const size = this.scale / SQRT_3_2 / 2;\n        if (this.orientation) {\n            s = new Float2(SQRT_3 * tile.x + SQRT_3_2 * tile.z, tile.z * this.scaleY * 1.5);\n        }\n        else {\n            s = new Float2(tile.x * 1.5, (SQRT_3_2 * tile.x + SQRT_3 * tile.z) * this.scaleY);\n        }\n        return s.scale(size);\n    }\n    position(p) {\n        const size = this.scale / 2;\n        const pp = p.scale(1 / size);\n        pp.y *= this.scaleY;\n        let q;\n        let r;\n        if (this.orientation) {\n            q = SQRT_3_3 * pp.x + -1 / 3 * pp.y;\n            r = 2 / 3 * pp.y;\n        }\n        else {\n            q = 2 / 3 * pp.x;\n            r = -1 / 3 * pp.x + SQRT_3_3 * pp.y;\n        }\n        return new HexagonalTile(Math.round(q), Math.round(-q - r), Math.round(r));\n    }\n    tile(x, y) {\n        return this.toTile ? this.toTile(new Position(x, y)) : undefined;\n    }\n}\nHexagonalGrid.shapes = [Shape.Hexagonal,\n    Shape.Rhombus, Shape.Even, Shape.Odd, Shape.Triangular];\n//# sourceMappingURL=HexagonalGrid.js.map","import { SQRT_2, SQRT_2_2, SQRT_2_4 } from './Constants';\nimport { Float2 } from './Float2';\nimport { HexagonalGrid } from './HexagonalGrid';\nimport { Shape } from './Shape';\n/**\n * ![](../../examples/output/brick-grid.svg)\n */\nexport class BrickGrid extends HexagonalGrid {\n    constructor(scale, orientation = false, shape = Shape.Hexagonal, x = 1, y) {\n        super(scale, orientation, shape, x, y);\n        this.angle = 0;\n        this.radius = SQRT_2_4 * scale;\n    }\n    vertices(orientation, scale) {\n        const s = (scale === undefined) ? this.scale : scale;\n        const points = [];\n        for (let i = 0; i < 4; i++) {\n            const angle = Math.PI * (i * 2 - 1) * 2 / 8;\n            points.push(new Float2(s * Math.cos(angle) * 0.5, s * Math.sin(angle) * 0.5));\n        }\n        return points;\n    }\n    center(cube) {\n        let s;\n        const size = this.scale / 2;\n        if (this.orientation) {\n            s = new Float2(SQRT_2 * cube.x + SQRT_2_2 * cube.z, SQRT_2 * cube.z * this.scaleY);\n        }\n        else {\n            s = new Float2(SQRT_2 * cube.x, (SQRT_2_2 * cube.x + SQRT_2 * cube.z) * this.scaleY);\n        }\n        return s.scale(size);\n    }\n}\n//# sourceMappingURL=BrickGrid.js.map","import { Integer2 } from './Integer2';\n/**\n * ![](../../examples/output/triangular-tile.svg)\n */\nexport class TriangularTile extends Integer2 {\n    constructor(x = 0, y = 0, s = false) {\n        super(x, y);\n        this.s = s;\n    }\n    get key() {\n        return this.toString();\n    }\n    get value() {\n        return [this.x, this.y, this.s];\n    }\n    toString() {\n        return this.value.toString();\n    }\n    equals(p) {\n        return (this.s === p.s) && super.equals(p);\n    }\n    shift() {\n        return TriangularTile.directions1[0][1];\n    }\n    directions() {\n        return this.s ? TriangularTile.directions2 : TriangularTile.directions1;\n    }\n    opposite(n) {\n        return TriangularTile.opposites[this.s.toString()][n];\n    }\n    add(a) {\n        const r = super.add(a);\n        return new TriangularTile(r.x, r.y, a.s);\n    }\n    scale(a) {\n        const r = super.scale(a);\n        return new TriangularTile(r.x, r.y);\n    }\n    multiNeighbors() {\n        const results = [];\n        for (let dir = 1; dir < 4; dir++) {\n            const d = TriangularTile.multiDirections[this.s.toString()][dir];\n            const t = this.s ? TriangularTile.directions2[d][1] : TriangularTile.directions1[d][1];\n            results.push([dir, this.add(t)]);\n            results.push([TriangularTile.multiOpposites[this.s.toString()][dir], this.add(t)]);\n        }\n        return results;\n    }\n    neighbors() {\n        const results = [];\n        for (let dir = 0; dir < 3; dir++) {\n            results.push([TriangularTile.directions1[dir][0],\n                this.add(this.s ? TriangularTile.directions2[dir][1] : TriangularTile.directions1[dir][1])]);\n        }\n        return results;\n    }\n}\nTriangularTile.directions1 = [\n    [1, new TriangularTile(0, 0, true)],\n    [2, new TriangularTile(-1, 0, true)],\n    [3, new TriangularTile(0, -1, true)]\n];\nTriangularTile.directions2 = [\n    [1, new TriangularTile(0, 1, false)],\n    [2, new TriangularTile(0, 0, false)],\n    [3, new TriangularTile(1, 0, false)]\n];\nTriangularTile.opposites = {\n    false: {\n        1: 3,\n        2: 1,\n        3: 2\n    },\n    true: {\n        1: 2,\n        2: 3,\n        3: 1\n    }\n};\nTriangularTile.multiOpposites = {\n    false: {\n        '-1': 2,\n        '-2': 3,\n        '-3': 1,\n        1: -3,\n        2: -1,\n        3: -2\n    },\n    true: {\n        '-1': 3,\n        '-2': 1,\n        '-3': 2,\n        1: -2,\n        2: -3,\n        3: -1\n    }\n};\nTriangularTile.multiDirections = {\n    false: {\n        1: 0,\n        2: 2,\n        3: 1\n    },\n    true: {\n        1: 0,\n        2: 2,\n        3: 1\n    }\n};\n//# sourceMappingURL=TriangularTile.js.map","import { bounds } from './bounds';\nimport { SQRT_3_2, SQRT_3_3, SQRT_3_6 } from './Constants';\nimport { Float2 } from './Float2';\nimport { Position } from './Position';\nimport { Shape } from './Shape';\nimport { TileType } from './TileType';\nimport { TriangularTile } from './TriangularTile';\n/**\n * ![](../../examples/output/triangular-grid.svg)\n */\nexport class TriangularGrid {\n    constructor(scale, orientation = false, shape = Shape.Triangular, x = 1, y = 1) {\n        this.scaleY = -1;\n        this.angle = -60;\n        this.tileTypes = TileType.Variable;\n        this.scale = scale;\n        this.radius = SQRT_3_6 * scale / SQRT_3_2;\n        this.orientation = orientation;\n        this.x = x;\n        this.y = y;\n        if (shape === Shape.Rhombus) {\n            this.tiles = this.rhombus();\n            this.orientation = false;\n        }\n        else if (shape === Shape.Hexagonal) {\n            this.tiles = this.hexagonalShape(x);\n            this.orientation = false;\n        }\n        else {\n            this.tiles = this.triangle();\n            this.orientation = false;\n        }\n        this.toPoint = (tile) => {\n            return new Position(tile.x * 2 + (tile.s ? 1 : 0), tile.y);\n        };\n        this.toTile = (position) => {\n            return new TriangularTile(position.x / 2 - (position.x % 2), position.y);\n        };\n    }\n    bounds() {\n        return bounds(this);\n    }\n    center(tile) {\n        const scale = this.scale / SQRT_3_2;\n        return new Float2((tile.x * 2 + (tile.s ? 1 : 0) + tile.y) * scale / 2, scale * (tile.y * (SQRT_3_2) + (tile.s ? 0 : -(SQRT_3_6))) * this.scaleY);\n    }\n    vertices(orientation, scale, tileType = 0) {\n        let s = (scale === undefined) ? this.scale : scale;\n        s /= SQRT_3_2;\n        if (this.scaleY > 0 ? tileType === 0 : tileType !== 0) {\n            return [\n                new Float2(0, -s * SQRT_3_3),\n                new Float2(-s / 2, s * SQRT_3_6),\n                new Float2(s / 2, s * SQRT_3_6)\n            ];\n        }\n        else {\n            return [\n                new Float2(0, s * (SQRT_3_6 + (SQRT_3_6))),\n                new Float2(-s / 2, -s * (SQRT_3_3 - (SQRT_3_6))),\n                new Float2(s / 2, -s * (SQRT_3_3 - (SQRT_3_6)))\n            ];\n        }\n    }\n    position(p) {\n        return new TriangularTile(Math.round(p.x), Math.round(p.y), false);\n    }\n    getTileType(tile) {\n        return tile.s ? 0 : 1;\n    }\n    tile(x, y) {\n        return new TriangularTile(Math.floor(x / 2), y, !!(x % 2));\n    }\n    rhombus() {\n        const results = [];\n        for (let px = 0; px < this.x; px++) {\n            for (let py = 0; py < this.y; py++) {\n                results.push(new TriangularTile(px, py, false));\n                results.push(new TriangularTile(px, py, true));\n            }\n        }\n        return results;\n    }\n    triangle() {\n        const results = [];\n        for (let py = 0; py < this.x; py++) {\n            for (let px = 0; px < (this.x - py); px++) {\n                results.push(new TriangularTile(px, py, false));\n                if (px < (this.x - py - 1)) {\n                    results.push(new TriangularTile(px, py, true));\n                }\n            }\n        }\n        return results;\n    }\n    hexagonalShape(size) {\n        const results = [];\n        for (let x = -size; x < size; x++) {\n            for (let y = -size; y < size; y++) {\n                if (Math.abs(-x - y) <= size && (x + y) < size) {\n                    results.push(new TriangularTile(x, y, false));\n                }\n                if ((Math.abs(-x - y) - 1) <= size && (x + y + 1) < size) {\n                    results.push(new TriangularTile(x, y, true));\n                }\n            }\n        }\n        return results;\n    }\n}\nTriangularGrid.shapes = [Shape.Hexagonal, Shape.Rhombus, Shape.Triangular];\n//# sourceMappingURL=TriangularGrid.js.map","import { Integer3 } from './Integer3';\nexport class Float3 {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static ROUND(h) {\n        let rx = Math.round(h.x);\n        let ry = Math.round(h.y);\n        let rz = Math.round(h.z);\n        const xDiff = Math.abs(rx - h.x);\n        const yDiff = Math.abs(ry - h.y);\n        const zDiff = Math.abs(rz - h.z);\n        if (xDiff > yDiff && xDiff > zDiff) {\n            rx = -ry - rz;\n        }\n        else if (yDiff > zDiff) {\n            ry = -rx - rz;\n        }\n        else {\n            rz = -rx - ry;\n        }\n        return new Integer3(rx, ry, rz);\n    }\n    static LERP(a, b, t) {\n        return new Float3(a.x + (b.x - a.x) * t, a.y + (b.y - a.y) * t, a.z + (b.z - a.z) * t);\n    }\n    static LINE(a, b) {\n        const N = a.distance(b);\n        const results = [];\n        for (let i = 0; i < (N + 1); i++) {\n            results.push(Float3.ROUND(Float3.LERP(a, b, 1 / Math.max(1, N) * i)));\n        }\n        return results;\n    }\n    equals(other) {\n        return (this.x === other.x) && (this.y === other.y) && (this.z === other.z);\n    }\n    get value() {\n        return [this.x, this.y, this.z];\n    }\n    toString() {\n        return this.value.toString();\n    }\n    round() {\n        return Float3.ROUND(this);\n    }\n}\n//# sourceMappingURL=Float3.js.map","import { Axes4 } from './Axes';\nimport { Integer3 } from './Integer3';\n/**\n * ![](../../examples/output/radial-tile.svg)\n * x: angle position\n * y: radius position\n * z: radius width\n * w: angular length\n */\nexport class RadialTile extends Integer3 {\n    constructor() {\n        super(...arguments);\n        this.tiles = [];\n    }\n    get value() {\n        return [this.x, this.y];\n    }\n    get key() {\n        return this.toString();\n    }\n    shift() {\n        return new RadialTile(-1, 1, 0);\n    }\n    directions() {\n        return RadialTile.directions;\n    }\n    add(a) {\n        const length = this.z || a.z;\n        let angle = this.x + a.x;\n        angle = angle % length;\n        angle = (angle + length) % length;\n        return new RadialTile(angle, this.y + a.y, length);\n    }\n    scale(a) {\n        return new RadialTile(this.x, this.y * a, this.z);\n    }\n    cubeLength() {\n        return Math.floor(Math.abs(this.y));\n    }\n    neighbors() {\n        const results = [];\n        for (const a of RadialTile.directions) {\n            results.push([a[0], this.add(a[1])]);\n        }\n        return results;\n    }\n}\nRadialTile.directions = [\n    [Axes4.N, new RadialTile(0, -1, 0)],\n    [Axes4.S, new RadialTile(0, 1, 0)],\n    [Axes4.E, new RadialTile(1, 0, 0)],\n    [Axes4.W, new RadialTile(-1, 0, 0)]\n];\n//# sourceMappingURL=RadialTile.js.map","import { ANG, DEG_TO_RAD } from './Constants';\nimport { Float2 } from './Float2';\nimport { Float3 } from './Float3';\nimport { Position } from './Position';\nimport { RadialTile } from './RadialTile';\nimport { Rectangle } from './Rectangle';\nimport { Shape } from './Shape';\nimport { TileType } from './TileType';\n/**\n * ![](../../examples/output/Radial-grid.svg)\n */\nexport class RadialGrid {\n    constructor(scale, orientation = false, shape = Shape.Even, x = 1, y = 1, tile = RadialTile, startY = 0) {\n        this.scaleY = -1;\n        this.angle = -0;\n        this.tileTypes = TileType.Simple;\n        this.irregular = true;\n        this.scale = scale;\n        this.radius = scale / 2;\n        this.orientation = orientation;\n        this.x = x;\n        this.y = y;\n        this.startY = startY;\n        this.tileCtor = tile;\n        const results = [];\n        for (let px = 0; px < x; px++) {\n            for (let py = startY; py < y; py++) {\n                results.push(new tile(px, py, x));\n            }\n        }\n        this.tiles = results;\n        this.toTile = (p) => new this.tileCtor(p.x, p.y);\n        this.toPoint = (p) => new Position(p.x, p.y);\n    }\n    bounds() {\n        const r = this.scale * this.y;\n        return new Rectangle(-r, r, -r, r);\n        // return bounds(this);\n    }\n    vertices(orientation, scale, tileType, tile) {\n        const t = tile;\n        const points = [];\n        const c = this.center(t);\n        points.push(this.center(new Float3(t.x - 0.5, t.y - 0.5, t.z)));\n        points.push(this.center(new Float3(t.x + 0.5, t.y - 0.5, t.z)));\n        points.push(this.center(new Float3(t.x + 0.5, t.y + 0.5, t.z)));\n        points.push(this.center(new Float3(t.x - 0.5, t.y + 0.5, t.z)));\n        return points.map((p) => new Float2(p.x - c.x, p.y - c.y));\n    }\n    path(tile) {\n        const p = this.vertices(false, 0, 0, tile);\n        const c = this.center(tile);\n        const r1 = this.scale * tile.y;\n        const r2 = this.scale * (tile.y + 1);\n        return `M ${p[0].x} ${p[0].y} A ${r1} ${r1} 0 0 0 ${p[1].x} ${p[1].y} `\n            + `L ${p[2].x} ${p[2].y} A ${r2} ${r2} 0 0 1 ${p[3].x} ${p[3].y} Z`;\n    }\n    position(p) {\n        return new this.tileCtor(Math.round(p.x / this.scale), Math.round(p.y / this.scale * this.scaleY));\n    }\n    tile(x, y) {\n        return this.toTile(new Position(x, y));\n    }\n    center(tile) {\n        let angle;\n        if (this.orientation) {\n            angle = tile.x + 0.5;\n            angle = angle % tile.z;\n            angle = (angle + tile.z) % tile.z;\n            angle = (angle * DEG_TO_RAD) * (ANG / tile.z);\n        }\n        else {\n            angle = (tile.x * DEG_TO_RAD) * (ANG / tile.z);\n        }\n        return new Float2((tile.y + 0.5) * this.scale * Math.sin(angle), (tile.y + 0.5) * this.scale * Math.cos(angle));\n    }\n}\n//# sourceMappingURL=RadialGrid.js.map","import { Axes4 } from './Axes';\nimport { Integer2 } from './Integer2';\n/**\n * ![](../../examples/output/rectangular-tile.svg)\n */\nexport class RectangularTile extends Integer2 {\n    get key() {\n        return this.toString();\n    }\n    shift() {\n        return new RectangularTile(-1, 1);\n    }\n    directions() {\n        return RectangularTile.directions;\n    }\n    add(a) {\n        const r = super.add(a);\n        return new RectangularTile(r.x, r.y);\n    }\n    scale(a) {\n        const r = super.scale(a);\n        return new RectangularTile(r.x, r.y);\n    }\n    neighbors() {\n        const results = [];\n        for (const dir of RectangularTile.directions) {\n            results.push([dir[0], this.add(dir[1])]);\n        }\n        return results;\n    }\n}\nRectangularTile.directions = [\n    [Axes4.N, new RectangularTile(0, -1)],\n    [Axes4.E, new RectangularTile(1, 0)],\n    [Axes4.S, new RectangularTile(0, 1)],\n    [Axes4.W, new RectangularTile(-1, 0)]\n];\n//# sourceMappingURL=RectangularTile.js.map","import { bounds } from './bounds';\nimport { SQRT_2 } from './Constants';\nimport { Float2 } from './Float2';\nimport { Position } from './Position';\nimport { RectangularTile } from './RectangularTile';\nimport { Shape } from './Shape';\nimport { TileType } from './TileType';\n// TypeScript version of http://www.redblobgames.com/articles/grids/hexagons/\n// Copyright 2013 Red Blob Games <redblobgames@gmail.com>\n// License: Apache v2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>\n/**\n * ![](../../examples/output/rectangular-grid.svg)\n */\nexport class RectangularGrid {\n    constructor(scale, orientation = false, shape = Shape.Even, x = 1, y = 1, tile = RectangularTile, startY = 0) {\n        this.scaleY = -1;\n        this.angle = -45;\n        this.tileTypes = TileType.Simple;\n        this.scale = scale;\n        this.radius = scale / 2;\n        this.orientation = orientation;\n        this.x = x;\n        this.y = y;\n        this.startY = y;\n        this.tileCtor = tile;\n        const results = [];\n        for (let px = 0; px < x; px++) {\n            for (let py = startY; py < y; py++) {\n                results.push(new tile(px, py));\n            }\n        }\n        this.tiles = results;\n        this.toTile = (p) => new this.tileCtor(p.x, p.y);\n        this.toPoint = (p) => new Position(p.x, p.y);\n    }\n    bounds() {\n        return bounds(this);\n    }\n    center(tile) {\n        if (this.orientation) {\n            return new Float2(tile.x * this.scale / SQRT_2 + tile.y * this.scale * this.scaleY / SQRT_2, tile.y * this.scale * this.scaleY / SQRT_2 - tile.x * this.scale / SQRT_2);\n        }\n        else {\n            return new Float2(tile.x * this.scale, tile.y * this.scale * this.scaleY);\n        }\n    }\n    vertices(orientation, scale) {\n        const points = [];\n        let s = (scale === undefined) ? this.scale : scale;\n        const o = (orientation === undefined) ? false : this.orientation;\n        if (o) {\n            s *= SQRT_2;\n            points.push(new Float2(-s / 2, 0));\n            points.push(new Float2(0, -s / 2));\n            points.push(new Float2(s / 2, 0));\n            points.push(new Float2(0, s / 2));\n        }\n        else {\n            points.push(new Float2(-s / 2, -s / 2));\n            points.push(new Float2(-s / 2, s / 2));\n            points.push(new Float2(s / 2, s / 2));\n            points.push(new Float2(s / 2, -s / 2));\n        }\n        return points;\n    }\n    position(p) {\n        return new this.tileCtor(Math.round(p.x / this.scale), Math.round(p.y / this.scale * this.scaleY));\n    }\n    tile(x, y) {\n        return this.toTile(new Position(x, y));\n    }\n}\n//# sourceMappingURL=RectangularGrid.js.map","import { Axes8 } from './Axes';\nimport { Integer3 } from './Integer3';\n/**\n * ![](../../examples/output/radial-tile.svg)\n * x: angle position\n * y: radius position\n * z: angular length\n */\nexport class Radial8Tile extends Integer3 {\n    constructor() {\n        super(...arguments);\n        this.tiles = [];\n    }\n    get value() {\n        return [this.x, this.y];\n    }\n    get key() {\n        return this.toString();\n    }\n    shift() {\n        return new Radial8Tile(-1, 1, 0);\n    }\n    directions() {\n        return Radial8Tile.directions;\n    }\n    add(a) {\n        const length = this.z || a.z;\n        let angle = this.x + a.x;\n        angle = angle % length;\n        angle = (angle + length) % length;\n        return new Radial8Tile(angle, this.y + a.y, length);\n    }\n    scale(a) {\n        return new Radial8Tile(this.x, this.y * a, this.z);\n    }\n    cubeLength() {\n        return Math.floor(Math.abs(this.y));\n    }\n    neighbors() {\n        const results = [];\n        for (const a of Radial8Tile.directions) {\n            results.push([a[0], this.add(a[1])]);\n        }\n        return results;\n    }\n}\nRadial8Tile.directions = [\n    [Axes8.N, new Radial8Tile(0, -1, 0)],\n    [Axes8.E, new Radial8Tile(1, 0, 0)],\n    [Axes8.NW, new Radial8Tile(-1, -1, 0)],\n    [Axes8.SW, new Radial8Tile(1, -1, 0)],\n    [Axes8.S, new Radial8Tile(0, 1, 0)],\n    [Axes8.W, new Radial8Tile(-1, 0, 0)],\n    [Axes8.SE, new Radial8Tile(1, 1, 0)],\n    [Axes8.NE, new Radial8Tile(-1, 1, 0)]\n];\n//# sourceMappingURL=Radial8Tile.js.map","import { Axes8 } from './Axes';\nimport { Integer2 } from './Integer2';\nimport { RectangularTile } from './RectangularTile';\n/**\n * ![](../../examples/output/rectangular-tile.svg)\n */\nexport class Rectangular8Tile extends Integer2 {\n    get key() {\n        return this.toString();\n    }\n    shift() {\n        return new Rectangular8Tile(-1, 1);\n    }\n    directions() {\n        return Rectangular8Tile.directions;\n    }\n    sides() {\n        return Rectangular8Tile.sides;\n    }\n    add(a) {\n        const r = super.add(a);\n        return new Rectangular8Tile(r.x, r.y);\n    }\n    scale(a) {\n        const r = super.scale(a);\n        return new Rectangular8Tile(r.x, r.y);\n    }\n    neighbors() {\n        const results = [];\n        for (const dir of Rectangular8Tile.directions) {\n            results.push([dir[0], this.add(dir[1])]);\n        }\n        return results;\n    }\n    sideNeighbors() {\n        const results = [];\n        for (const dir of RectangularTile.directions) {\n            results.push([dir[0], this.add(dir[1])]);\n        }\n        return results;\n    }\n}\nRectangular8Tile.directions = [\n    [Axes8.N, new Rectangular8Tile(0, -1)],\n    [Axes8.E, new Rectangular8Tile(1, 0)],\n    [Axes8.NW, new Rectangular8Tile(-1, -1)],\n    [Axes8.SW, new Rectangular8Tile(1, -1)],\n    [Axes8.S, new Rectangular8Tile(0, 1)],\n    [Axes8.W, new Rectangular8Tile(-1, 0)],\n    [Axes8.SE, new Rectangular8Tile(1, 1)],\n    [Axes8.NE, new Rectangular8Tile(-1, 1)]\n];\nRectangular8Tile.sides = [\n    Rectangular8Tile.directions[0],\n    Rectangular8Tile.directions[1],\n    Rectangular8Tile.directions[4],\n    Rectangular8Tile.directions[5]\n];\n//# sourceMappingURL=Rectangular8Tile.js.map","import { ANG_4, DEG_TO_RAD } from './Constants';\nexport function instance(obj) {\n    return new obj.constructor();\n}\nexport function enumerate(obj) {\n    const result = {};\n    const keys = Object.keys(obj);\n    for (const i of keys) {\n        const value = parseInt(i, 10);\n        if (value >= 0) {\n            result[obj[i]] = value;\n        }\n    }\n    return result;\n}\nexport function mapped(available, selection) {\n    return selection.filter((t) => available.has(t[1].key))\n        .map((t) => [t[0], available.get(t[1].key)]);\n}\nexport function toMap(tiles) {\n    return new Map(tiles.map((t) => ([t.key, t])));\n}\nexport function toArray(m) {\n    return Array.from(m.values());\n}\nexport function link(tilesMap) {\n    for (const tile of tilesMap.values()) {\n        tile.links = new Map();\n        for (const n of tile.multiNeighbors ? tile.multiNeighbors() : tile.neighbors()) {\n            if (tilesMap.has(n[1].key)) {\n                tile.links.set(n[0], tilesMap.get(n[1].key));\n            }\n        }\n    }\n}\nexport function polarToCartesian(centerX, centerY, radius, angleInDegrees) {\n    const angleInRadians = (angleInDegrees - ANG_4) * DEG_TO_RAD;\n    return {\n        x: centerX + (radius * Math.cos(angleInRadians)),\n        y: centerY + (radius * Math.sin(angleInRadians))\n    };\n}\nexport function describeArc(x, y, radius, startAngle, endAngle) {\n    const start = polarToCartesian(x, y, radius, endAngle);\n    const end = polarToCartesian(x, y, radius, startAngle);\n    const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\n    return [\n        'M', start.x, start.y,\n        'A', radius, radius, 0, largeArcFlag, 0, end.x, end.y\n    ].join(' ');\n}\n//# sourceMappingURL=Utils.js.map","import { toMap } from './Utils';\n// From http://www.redblobgames.com/grids/hexagons/\n// Copyright 2013 Red Blob Games <redblobgames@gmail.com>\n// License: Apache v2.0 <http://www.apache.org/licenses/LICENSE-2.0.html>\n// Original source: http://www.redblobgames.com/grids/hexagons/ui.js\nexport class Search {\n    constructor(start, maxMovement, maxMagnitude, blocked, available) {\n        this.cost = {};\n        this.previous = {};\n        this.max = 0;\n        const starts = start.value ? [start] : start;\n        this.start = starts[0];\n        const blockedMap = blocked ? toMap(blocked) : undefined;\n        const availableMap = available ? toMap(available) : undefined;\n        for (const s of starts) {\n            this.cost[s.key] = 0;\n            this.previous[s.key] = null;\n        }\n        const fringes = [starts];\n        for (let k = 0; k < maxMovement && fringes[k].length > 0; k++) {\n            fringes[k + 1] = [];\n            for (const tile of fringes[k]) {\n                const neighbors = tile.neighbors();\n                for (const dir of neighbors) {\n                    const neighbor = dir[1];\n                    if (availableMap && !availableMap.has(neighbor.key)) {\n                        continue;\n                    }\n                    if ((this.cost[neighbor.key] === undefined)\n                        && ((blockedMap && !blockedMap.has(neighbor.key)) || (!blocked))\n                        && neighbor.cubeLength() <= maxMagnitude) {\n                        this.cost[neighbor.key] = k + 1;\n                        this.max = Math.max(this.max, k + 1);\n                        this.previous[neighbor.key] = tile;\n                        fringes[k + 1].push(neighbor);\n                    }\n                }\n            }\n        }\n    }\n    path(end, max = false) {\n        const ends = end.value ? [end] : end;\n        const min = (max ? Math.max : Math.min)\n            .apply(null, ends.map((e) => this.cost[e.key]).filter((e) => e !== undefined));\n        const path = [];\n        let node = ends.find((e) => this.cost[e.key] === min) || null;\n        while (node) {\n            path.push(node);\n            node = node.equals(this.start) ? null : this.previous[node.key];\n        }\n        return path;\n    }\n}\n//# sourceMappingURL=Search.js.map","import { Position } from './Position';\nexport function rotate(grid, direction = 1) {\n    grid.tiles.forEach((t) => {\n        let d = direction;\n        while (d > 0) {\n            t.right();\n            d--;\n        }\n        while (d < 0) {\n            t.left();\n            d++;\n        }\n    });\n}\nexport function translate(grid, position) {\n    grid.tiles = grid.tiles.map((t) => grid.toTile ? grid.toTile(grid.toPoint(t).add(position)) : []);\n}\nexport function min(grid) {\n    const points = grid.tiles.map((t) => grid.toPoint(t));\n    return new Position(Math.min.apply(null, points.map((p) => p.x)), Math.min.apply(null, points.map((p) => p.y)));\n}\nexport function normalize(grid) {\n    const m = min(grid);\n    m.x = -m.x;\n    m.y = -m.y;\n    grid.tiles = grid.tiles.map((t) => grid.toTile ? grid.toTile(grid.toPoint(t).add(m)) : []);\n}\n//# sourceMappingURL=Transform.js.map","import { instance, mapped, toMap } from './Utils';\nexport function circle(start, N) {\n    return spiral(start, N, false);\n}\nexport function spiral(start, N, isSpiral = true) {\n    const results = [];\n    if (isSpiral) {\n        results.push(start.add(instance(start)));\n    }\n    const neighbors = start.sideNeighbors ? start.sideNeighbors() : start.neighbors();\n    const c = (neighbors.length === 6) ? 1 : 2;\n    for (let k = isSpiral ? 1 : N; k <= N; k++) {\n        let H = start.shift().scale(k);\n        for (let i = 0; i < neighbors.length; i++) {\n            for (let j = 0; j < k * c; j++) {\n                results.push(H.add(start));\n                H = (H.sideNeighbors ? H.sideNeighbors() : H.neighbors())[i][1];\n            }\n        }\n    }\n    return results;\n}\nexport function intersect(a, b) {\n    const results = [];\n    for (const i of a) {\n        for (const j of b) {\n            if (i.equals(j)) {\n                results.push(i);\n            }\n        }\n    }\n    return results;\n}\nexport function axes(a, axe, odd = false) {\n    const results = [];\n    for (const i of a) {\n        const v = i.value;\n        const l = (Math.abs(v[axe % v.length]) % 2) === 1;\n        if (l === odd) {\n            results.push(i);\n        }\n    }\n    return results;\n}\nexport function border(tiles) {\n    const tileMap = toMap(tiles);\n    return tiles.filter((t) => mapped(tileMap, t.neighbors()).length < t.directions().length);\n}\nexport function outline(tiles, available) {\n    const map = new Map();\n    const tileMap = toMap(tiles);\n    const availableMap = available ? toMap(available) : undefined;\n    tiles.forEach((t) => {\n        const n = new Map(mapped(tileMap, t.neighbors()));\n        const d = new Map(t.directions());\n        if (n.size < d.size) {\n            for (const [k, v] of d) {\n                if (!n.has(k)) {\n                    const w = t.add(v);\n                    if (availableMap) {\n                        map.set(w.key, availableMap.get(w.key));\n                    }\n                    else {\n                        map.set(w.key, w);\n                    }\n                }\n            }\n        }\n    });\n    return Array.from(map.values());\n}\nexport function connections(tiles) {\n    const c = [];\n    const available = toMap(tiles);\n    for (const t of tiles) {\n        const m = new Map(mapped(available, t.neighbors()));\n        const s = Array.from(m.keys()).filter((k) => (k > 0) && !m.has(t.opposite ? t.opposite(k) : -k));\n        for (const k of s) {\n            const l = [];\n            let i = t;\n            while (i) {\n                l.push(i);\n                i = new Map(mapped(available, i.neighbors())).get(k);\n            }\n            c.push(l);\n        }\n    }\n    return c;\n}\n//# sourceMappingURL=Path.js.map"],"names":["Shape","SQRT_3","Math","sqrt","SQRT_3_2","SQRT_3_3","SQRT_3_6","SQRT_2","SQRT_2_2","SQRT_2_4","DEG_TO_RAD","PI","ANG","Integer2","x","y","b","floor","abs","value","toString","p","d","Float2","k","h","rx","round","ry","a","t","N","distance","results","i","push","ROUND","LERP","max","Rectangle","minX","maxX","minY","maxY","boundsOfPoints","points","rectangle","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","bounds","grid","tileTypes","sum","centers","tiles","reduce","r","tile","getTileType","center","b1","vertices","orientation","undefined","b2","concat","POINTS","ADD","map","Axes4","Axes8","Axes6","Integer3","z","other","HexagonalTile","arguments","directions","add","NW","NE","SE","SW","S","TileType","HexagonalGrid","scale","shape","Hexagonal","scaleY","angle","Simple","radius","yy","Even","toTile","EVEN_Q_TO_CUBE","toPoint","CUBE_TO_EVEN_Q","TRAPEZOIDAL_SHAPE","EVEN_R_TO_CUBE","CUBE_TO_EVEN_R","Odd","ODD_Q_TO_CUBE","CUBE_TO_ODD_Q","ODD_R_TO_CUBE","CUBE_TO_ODD_R","TWO_AXIS_TO_CUBE","CUBE_TO_TWO_AXIS","HEXAGONAL_SHAPE","Triangular","TRIANGULAR_SHAPE","s","o","cos","sin","size","pp","q","Position","position","minQ","maxQ","minR","maxR","toCube","hexes","xmin","xmax","ymin","ymax","zmin","zmax","min","shapes","Rhombus","BrickGrid","cube","TriangularTile","directions1","directions2","n","opposites","dir","multiDirections","multiOpposites","false","true","TriangularGrid","Variable","rhombus","hexagonalShape","triangle","tileType","px","py","Float3","rz","xDiff","yDiff","zDiff","RadialTile","length","E","W","RadialGrid","startY","irregular","tileCtor","c","r1","r2","RectangularTile","RectangularGrid","Radial8Tile","Rectangular8Tile","sides","instance","obj","constructor","enumerate","result","keys","Object","parseInt","mapped","available","selection","filter","has","key","get","toMap","Map","toArray","m","Array","from","values","link","tilesMap","links","multiNeighbors","neighbors","set","Search","start","maxMovement","maxMagnitude","blocked","cost","previous","starts","blockedMap","availableMap","fringes","neighbor","cubeLength","end","ends","apply","e","path","node","find","equals","rotate","direction","forEach","right","left","translate","normalize","circle","spiral","isSpiral","sideNeighbors","H","shift","j","intersect","axes","axe","odd","v","l","border","tileMap","outline","w","connections","opposite"],"mappings":"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"}